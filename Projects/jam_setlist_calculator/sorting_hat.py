### ü§°ü§°ü§° ###

import pandas as pd
import numpy as np

# —Å—É—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞:


# - —Å–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Å–µ–Ω
# - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: 10 –∑–∞ –ø–µ—Ä–≤—É—é –∏ +10 –∑–∞ –∫–∞–∂–¥—É—é –ø–æ—Å–ª–µ–¥—É—é—â—É—é, –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –¥–∞–µ–º –ø–æ 6 –∂–∏–∑–Ω–µ–π
#
# - –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Å–Ω–∏ –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º score:
#     score = avg_weight
#     for musician in musicians:
#         if musician < avg_weight:
#             score -= musician
#         else:
#             score += musician
# - –µ—Å–ª–∏ —É –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Ç–æ–ø–æ–≤–æ–π –ø–µ—Å–Ω–∏ –µ—Å—Ç—å –∂–∏–∑–Ω–∏, –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å–∞–º—É—é —Ç–æ–ø–æ–≤—É—é –ø–µ—Å–Ω—é –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ç–ª–∏—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç,
# —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é
# - –≤—ã—á–∏—Ç–∞–µ–º —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–π –∂–∏–∑–Ω–∏
# - UPDATE —Ä–µ—à–∏–ª –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤–µ—Å–∞ –∏ score, –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∂–∏–∑–Ω–∏
# - –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ-—Ç–æ —Ä–∞–∑


# P.S. –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–æ–≤:
#     lowercase
#     optional, n/a - delete
#     –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –±—É–∫–≤–∞, —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, –æ—Ç—Ä–µ–∑–∞—Ç—å –≤—Å–µ –¥–æ –∫–æ–Ω—Ü–∞
#     –¥–æ–±–∞–≤–∏—Ç—å @ –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏

LIVES_COUNT = 5
FINAL_SONGS_COUNT = 25
INSTRUMENTS_LIST = ['Vocal 1',
                     'Vocal 2',
                     'Guitar 1',
                     'Guitar 2',
                     'Bass',
                     'Drums',
                     'Keyboard+Other']

# —á–∏—Ç–∞–µ–º csv, —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º, –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å–∫–∏–ø–∞–µ–º —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º –ø–æ–ª–æ—Ç–Ω–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –±–µ–∑
# —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã.
original_data = pd.DataFrame(pd.read_csv("test_info_2.csv", skiprows=1))

# –Ω–∞–º –ø–æ—Ö—É–π –Ω–∞ –Ω–µ—Å–æ–±—Ä–∞–≤—à–∏–µ—Å—è –ø–µ—Å–Ω–∏, —É–¥–∞–ª—è–µ–º
filtered_data = original_data[original_data.isin(["0.Ready!"]).any(axis=1)]
filtered_data.insert(0, "score", "")
filtered_data = filtered_data.reset_index(drop=True)

final_data = pd.DataFrame(
    columns=filtered_data.columns)  # –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ç–ª–∏—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–±–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤

# —Å–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏—á–µ—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤
member_list_full = []
member_list_unique = []
for instrument in INSTRUMENTS_LIST:
    for index, member in filtered_data[instrument].items():
        if type(member) == str:
            member = member.lower()  # —É –æ–∑–∑–∏ –±–ª—è—Ç—å –ø—è—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–π –Ω–∏–∫–∞, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ
            member = member.lstrip()  # –ø—Ä–æ–±–µ–ª—ã —Å–ª–µ–≤–∞ - –Ω–∞—Ö—É–π
            for i, char in enumerate(member):  # –≤—Å—è–∫–æ–µ " –º–æ–≥—É —É—Å—Ç—É–ø–∏—Ç—å" –≤ –∫–æ–Ω—Ü–µ - –Ω–∞—Ö—É–π
                if not (char.isalnum() or char in ['@', '_', "/"]):
                    member = member[:i]
            if member not in ["nan", "optional", "n/a"]:
                if not member.startswith("@"):  # –æ–∑–∑–∏ —Å –î–∞—à–µ–π –≤—Å–µ –∑–∞–±—ã–≤–∞—é—Ç —á—Ç–æ –Ω–∏–∫–∏ –≤ —Ç–µ–ª–µ–≥–µ –Ω–∞—á–∏–Ω–≤–∞—é—Ç—Å—è —Å @
                    member = "@" + member
                member_list_full.append(member)
                filtered_data.loc[index, instrument] = member
            else:  # –∞ –µ–±–Ω—É-–∫–∞ —è –≤–æ–æ–±—â–µ –≤—Å–µ –∫—Ä–æ–º–µ –Ω–∏–∫–æ–≤, –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞
                filtered_data.loc[index, instrument] = np.nan
for item in member_list_full:
    if item not in member_list_unique:
        member_list_unique.append(item)

# –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –¥–ª—è –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤
member_data = pd.DataFrame(columns=['name', 'weight', 'lives'])
for member in member_list_unique:
    lives = LIVES_COUNT
    name = member
    weight = member_list_full.count(member) * 10
    member_data.loc[len(member_data.index)] = [member, weight, lives]  # —Ç—É—Ç –∑–∞–±–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞. –° –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    # –≤ member_data –µ–≥–æ len —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1, —Ç–∞–∫ —á—Ç–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–π —Ö—É–π–Ω–∏ –æ–Ω–æ –ø–∏—à–µ—Ç—Å—è –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É

# –¶–∏–∫–ª –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–µ—Ä–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Å–µ–Ω
while len(final_data) < FINAL_SONGS_COUNT:
    avg_weight = round(member_data["weight"].mean())
    filtered_data_len = len(filtered_data.index)

    people_with_one_song = member_data.loc[member_data['weight'] == 10]['name'].tolist()
    print('yo', people_with_one_song)

    for human in people_with_one_song:
        if member_data.loc[member_data['lives'] == LIVES_COUNT]['name'].tolist():
            print(human)
            index_list = filtered_data.index[filtered_data.isin([human]).any(axis=1)].tolist()
            print(index_list)
            index = index_list[0]
            print(index)
            row_to_add = pd.DataFrame([filtered_data.loc[index]], columns=filtered_data.columns)
            final_data = pd.concat([final_data, row_to_add], ignore_index=True)
            for instrument in INSTRUMENTS_LIST:
                member_name = filtered_data[instrument].iloc[index]
                if member_name in member_list_unique:
                    member_index = member_data[member_data['name'] == member_name].index[0]
                    member_data.loc[member_index, 'lives'] -= 1
        if len(final_data) >= FINAL_SONGS_COUNT:
            break
        filtered_data = filtered_data.drop(index)
        filtered_data.reset_index(drop=True, inplace=True)

    for index in range(0, filtered_data_len):
        # –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Å–Ω–∏ –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º score, –≤—ã—Å—Ç–∞–≤–ª—è—è —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ –∫–∞–∫ —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å –∞ –ø–æ—Ç–æ–º –ª–∏–±–æ –≤—ã—á–∏—Ç–∞—è –∏–∑ –Ω–µ–≥–æ —Ç–µ—Ö
        # —É –∫–æ–≥–æ –≤–µ—Å –Ω–∏–∂–µ –∏ –ø—Ä–∏–±–∞–≤–ª—è—è –µ—Å–ª–∏ –≤—ã—à–µ.
        score = avg_weight
        for instrument in INSTRUMENTS_LIST:
            if filtered_data[instrument].iloc[index] in member_list_unique:
                member_name = filtered_data[instrument].iloc[index]
                member_weight = member_data[member_data['name'] == member_name]['weight'].iloc[0]
                if member_weight >= avg_weight:
                    score += member_weight
                else:
                    # –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–∏–ª –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–Ω–∞—á–µ –æ–Ω–∏ –≤–æ–æ–±—â–µ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –≤–ª–∏—è—é—Ç
                    score -= member_weight
        filtered_data.loc[index, 'score'] = score
    filtered_data = filtered_data.sort_values(by='score').reset_index(drop=True)

    the_choice_is_made = 0
    index = 0
    while not the_choice_is_made:
        skip_the_song = 0
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∂–∏–∑–Ω–∏ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Å–Ω–∏, –µ—Å–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        for instrument in INSTRUMENTS_LIST:
            member_name = filtered_data[instrument].iloc[index]
            if member_name in member_list_unique:
                if member_data[member_data['name'] == member_name]['lives'].iloc[0] < 1:
                    skip_the_song = 1
                    index += 1
        # –µ—Å–ª–∏ –∂–∏–∑–Ω–∏ –µ—Å—Ç—å, —Ç–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø–µ—Å–Ω—é –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –¥—Ä–æ–ø–∞–µ–º –µ–µ
        if not skip_the_song:
            row_to_add = pd.DataFrame([filtered_data.loc[index]], columns=filtered_data.columns)
            final_data = pd.concat([final_data, row_to_add], ignore_index=True)
            for instrument in INSTRUMENTS_LIST:
                member_name = filtered_data[instrument].iloc[index]
                if member_name in member_list_unique:
                    member_index = member_data[member_data['name'] == member_name].index[0]
                    member_data.loc[member_index, 'lives'] -= 1
            filtered_data = filtered_data.drop(index)
            filtered_data.reset_index(drop=True, inplace=True)
            the_choice_is_made = 1
        # –µ—Å–ª–∏ –ø—Ä–æ–±–µ–∂–∞–ª–∏—Å—å –ø–æ –≤—Å–µ–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ –±–µ—Ä–µ–º —Å –º–µ–Ω—å—à–∏–º –≤–µ—Å–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –∂–∏–∑–Ω–µ–π —É–∂–µ –Ω–µ—Ç.
        # —ç—Ç–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –Ω–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å –ø–µ—Å–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —É—Å–ª–æ–≤–∏—è–º.
        elif index >= filtered_data_len - 1:
            row_to_add = pd.DataFrame([filtered_data.loc[1]], columns=filtered_data.columns)
            final_data = pd.concat([final_data, row_to_add], ignore_index=True)
            for instrument in INSTRUMENTS_LIST:
                member_name = filtered_data[instrument].iloc[1]
                if member_name in member_list_unique:
                    member_index = member_data[member_data['name'] == member_name].index[0]
                    member_data.loc[member_index, 'lives'] -= 1
            filtered_data = filtered_data.drop(1)
            filtered_data.reset_index(drop=True, inplace=True)
            the_choice_is_made = 1

# –≤—Å–µ –∫—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –∂–∏–∑–Ω—è–º–∏:
additional_data = pd.DataFrame(columns=filtered_data.columns)
for poor_bastard in member_data.loc[member_data['lives'] == 5, 'name'].tolist():
    data_to_add = filtered_data[filtered_data.isin([poor_bastard]).any(axis=1)]
    additional_data = pd.concat([additional_data, data_to_add], ignore_index=True)
columns = ["score", "Band / –ì—Ä—É–ø–ø–∞", "Song / –ù–∞–∑–≤–∞–Ω–∏–µ"] + INSTRUMENTS_LIST

print("\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n", final_data)

print("\n–ù–µ–≤–æ—à–µ–¥—à–∏–µ –ø–µ—Å–Ω–∏:\n", filtered_data)

pd.set_option('display.max_rows', None)
print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n", member_data.sort_values(by='lives'))

pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
print("\n–ü–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫—É–¥–∞ –Ω–µ –≤–æ—à–ª–∏ –∏ –≥–¥–µ –µ—Å—Ç—å –ª—é–¥–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–≥–¥–µ –±–æ–ª—å—à–µ –Ω–µ –∏–≥—Ä–∞—é—Ç:\n", additional_data[columns].sort_values(by='Song / –ù–∞–∑–≤–∞–Ω–∏–µ').drop_duplicates())


